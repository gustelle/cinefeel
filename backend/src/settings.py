from pathlib import Path

from pydantic import AnyUrl, Field, HttpUrl, SecretStr
from pydantic_settings import BaseSettings, SettingsConfigDict

from src.entities.content import PageLink


class TableOfContents(PageLink):
    """Configuration for a Wikipedia Table-of-content (TOC) page.

    A table of content page is a page that contains a list of links to other pages.
    For example, the page "Liste de films français sortis en 1907" contains a list of links to
    all the films released in 1907.
    """

    permalinks_selector: str | None = Field(
        None,
        description="""
            The CSS selector to use to extract the (list of) links from the table of contents.
            The selector should return a list of links to the pages to download.
        """,
        examples=[".wikitable td:nth-child(1)"],
    )


_default_film_tocs = [
    TableOfContents(
        page_id=f"Liste_de_films_français_sortis_en_{year}",
        permalinks_selector=".wikitable td:nth-child(1)",
        entity_type="Movie",
    )
    for year in range(1907, 1908)
]

_default_person_tocs = [
    TableOfContents(
        page_id=f"Liste_de_films_français_sortis_en_{year}",
        permalinks_selector=".wikitable td:nth-child(2)",
        entity_type="Person",
    )
    for year in range(1907, 1908)
]
_default_tocs = _default_film_tocs + _default_person_tocs


class Settings(BaseSettings):
    """
    TODO:
    - rename some configs to be more explicit (crawler_use_cache -> http_cache_enabled, meili_ -> search_, etc.)
    """

    model_config = SettingsConfigDict(
        # `.env.prod` takes priority over `.env`
        env_file=(".env", ".env.prod")
    )

    download_cache_enabled: bool = Field(
        default=True,
        description="Whether to use the cache for the Wikipedia API",
    )
    download_cache_expire_after: int = Field(
        default=60 * 60 * 24,
        description="The expiration time of the cache in seconds",
    )
    download_start_pages: list[TableOfContents] = Field(
        default=_default_tocs,
    )

    mediawiki_api_key: str = Field(
        default="",
        description="The API key for the MediaWiki API",
    )
    mediawiki_base_url: str = Field(
        default="https://api.wikimedia.org/core/v1/wikipedia/fr",
        description="The base URL of the Wikipedia API",
    )
    mediawiki_user_agent: str = Field(
        default="Cinefeel",
        description="The user agent to use for the Wikipedia API",
    )

    download_max_concurrency: int = Field(
        default=10,
        description="The maximum number of concurrent connections to download pages",
    )
    download_user_agent: str = Field(
        default="Cinefeel",
        description="The user agent to use for the Wikipedia API",
    )

    meili_base_url: HttpUrl | None = Field(
        default="http://localhost:7700",
        description="The base URL of the MeiliSearch API",
    )
    meili_api_key: str = Field(
        default="cinefeel",
        description="The API key for the MeiliSearch API",
    )
    meili_films_index_name: str = Field(
        default="films",
    )
    meili_persons_index_name: str = Field(
        default="persons",
    )

    persistence_directory: Path = Field(
        default=Path("./data"),
        description="The path (relative or absolute) to the dir where the scraped data will be saved",
    )

    mistral_llm_model: str = Field(
        default="mistral-medium-latest",
    )

    mistral_api_key: SecretStr = Field(
        default="",
        description="The API key for the Mistral API",
    )

    ollama_llm_model: str = Field(
        default="llama3-chatqa:latest",
        description="The name of the LLM model to use for text processing.",
    )

    ollama_vision_model: str = Field(
        default="llava:7b",
        description="""
            The name of the vision model to use for image processing.
            """,
    )

    bert_similarity_model: str = Field(
        default="Lajavaness/sentence-camembert-base",
        description="""
            The name of the BERT model to use for similarity search
        """,
    )

    bert_summary_model: str = Field(
        default="paraphrase-albert-small-v2",
        description="""
            The name of the BERT model to use for summarizing contents.
        """,
    )

    bert_summary_max_length: int = Field(
        default=2000,
        description="""
            The maximum length of the summary generated by the BERT model.
            If the content is longer than this value, it will be truncated.
            Too short summaries would lead to poor results.
        """,
    )

    bert_similarity_threshold: float = Field(
        default=0.9,
        description="""
            The threshold for the BERT similarity score.
            If the score is below this value, the result will be considered as not found.
        """,
    )

    prefect_task_timeout: int = Field(
        default=60,  # 1 minute
        description="The timeout for prefect tasks in seconds",
    )

    # section params
    sections_max_children: int = Field(
        default=3,
        description="""
            The maximum number of children sections per section.
            If a section has more children than this value, the children will be truncated.
        """,
    )
    sections_max_per_page: int = Field(
        default=5,
        description="""
            The maximum number of sections to extract from a page.
            If a page has more sections than this value, the sections will be truncated.
        """,
    )
    sections_min_length: int = Field(
        default=500,
        description="""
            The minimum length of a section.
            If a section is shorter than this value, it will be ignored.
        """,
    )

    graph_db_uri: AnyUrl | None = Field(
        ...,
        description="""
            The URI of the database used to store the graph data.
        """,
    )
